import { __toESM } from "./chunk-B4p5S3KX.js";
import { require_react } from "./react-C2Ypln8Q.js";
import { AnchorMdx, CodeOrSourceMdx, Docs, HeadersMdx } from "./blocks-ChXDUNP9.js";
import { renderElement, unmountElement } from "./react-18-D_P2cVa6.js";

//#region node_modules/@storybook/addon-docs/dist/chunk-GWJYCGSQ.mjs
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
var defaultComponents = {
	code: CodeOrSourceMdx,
	a: AnchorMdx,
	...HeadersMdx
}, ErrorBoundary = class extends import_react.Component {
	constructor() {
		super(...arguments);
		this.state = { hasError: !1 };
	}
	static getDerivedStateFromError() {
		return { hasError: !0 };
	}
	componentDidCatch(err) {
		let { showException } = this.props;
		showException(err);
	}
	render() {
		let { hasError } = this.state, { children } = this.props;
		return hasError ? null : import_react.createElement(import_react.Fragment, null, children);
	}
}, DocsRenderer = class {
	constructor() {
		this.render = async (context, docsParameter, element) => {
			let components = {
				...defaultComponents,
				...docsParameter?.components
			}, TDocs = Docs;
			return new Promise((resolve, reject) => {
				import("./@mdx-js_react.js").then(({ MDXProvider }) => renderElement(import_react.createElement(ErrorBoundary, {
					showException: reject,
					key: Math.random()
				}, import_react.createElement(MDXProvider, { components }, import_react.createElement(TDocs, {
					context,
					docsParameter
				}))), element)).then(() => resolve());
			});
		}, this.unmount = (element) => {
			unmountElement(element);
		};
	}
};

//#endregion
export { DocsRenderer, defaultComponents };
//# sourceMappingURL=chunk-GWJYCGSQ-DEouk7lv.js.map