import { __toESM } from "./chunk-B4p5S3KX.js";
import { require_react } from "./react-C2Ypln8Q.js";

//#region node_modules/@mdx-js/react/lib/index.js
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
/** @type {Readonly<MDXComponents>} */
var emptyComponents = {};
var MDXContext = import_react.createContext(emptyComponents);
/**
* Get current components from the MDX Context.
*
* @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]
*   Additional components to use or a function that creates them (optional).
* @returns {MDXComponents}
*   Current components.
*/
function useMDXComponents(components) {
	const contextComponents = import_react.useContext(MDXContext);
	return import_react.useMemo(function() {
		if (typeof components === "function") return components(contextComponents);
		return {
			...contextComponents,
			...components
		};
	}, [contextComponents, components]);
}
/**
* Provider for MDX context.
*
* @param {Readonly<Props>} properties
*   Properties.
* @returns {ReactElement}
*   Element.
* @satisfies {Component}
*/
function MDXProvider(properties) {
	/** @type {Readonly<MDXComponents>} */
	let allComponents;
	if (properties.disableParentContext) allComponents = typeof properties.components === "function" ? properties.components(emptyComponents) : properties.components || emptyComponents;
	else allComponents = useMDXComponents(properties.components);
	return import_react.createElement(MDXContext.Provider, { value: allComponents }, properties.children);
}

//#endregion
export { MDXProvider, useMDXComponents };
//# sourceMappingURL=@mdx-js_react.js.map