{"version":3,"file":"estraverse.js","names":["replace","path","traverse","key","element","comment","exports"],"sources":["../../../../../estraverse/estraverse.js"],"sourcesContent":["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true*/\n(function clone(exports) {\n    'use strict';\n\n    var Syntax,\n        VisitorOption,\n        VisitorKeys,\n        BREAK,\n        SKIP,\n        REMOVE;\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ChainExpression: 'ChainExpression',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportExpression: 'ImportExpression',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        ModuleSpecifier: 'ModuleSpecifier',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        PrivateIdentifier: 'PrivateIdentifier',\n        Program: 'Program',\n        Property: 'Property',\n        PropertyDefinition: 'PropertyDefinition',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        AssignmentPattern: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'body'],\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ChainExpression: ['expression'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'superClass', 'body'],\n        ClassExpression: ['id', 'superClass', 'body'],\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExportAllDeclaration: ['source'],\n        ExportDefaultDeclaration: ['declaration'],\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n        ExportSpecifier: ['exported', 'local'],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        ImportExpression: ['source'],\n        ImportDeclaration: ['specifiers', 'source'],\n        ImportDefaultSpecifier: ['local'],\n        ImportNamespaceSpecifier: ['local'],\n        ImportSpecifier: ['imported', 'local'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        MetaProperty: ['meta', 'property'],\n        MethodDefinition: ['key', 'value'],\n        ModuleSpecifier: [],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        PrivateIdentifier: [],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        PropertyDefinition: ['key', 'value'],\n        RestElement: [ 'argument' ],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SpreadElement: ['argument'],\n        Super: [],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        TaggedTemplateExpression: ['tag', 'quasi'],\n        TemplateElement: [],\n        TemplateLiteral: ['quasis', 'expressions'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handler', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n\n    Reference.prototype.remove = function remove() {\n        if (Array.isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n\n    function Controller() { }\n\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n\n        function addToPath(result, path) {\n            if (Array.isArray(path)) {\n                for (j = 0, jz = path.length; j < jz; ++j) {\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n\n        // first node is sentinel, second node is root element\n        result = [];\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n\n    // API:\n    // return type of current node\n    Controller.prototype.type = function () {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n\n        // first node is sentinel\n        result = [];\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n            result.push(this.__leavelist[i].node);\n        }\n\n        return result;\n    };\n\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n\n        result = undefined;\n\n        previous  = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n\n        return result;\n    };\n\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function () {\n        this.notify(SKIP);\n    };\n\n    // API:\n    // break traversals\n    Controller.prototype['break'] = function () {\n        this.notify(BREAK);\n    };\n\n    // API:\n    // remove node\n    Controller.prototype.remove = function () {\n        this.notify(REMOVE);\n    };\n\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === 'iteration') {\n            this.__fallback = Object.keys;\n        } else if (typeof visitor.fallback === 'function') {\n            this.__fallback = visitor.fallback;\n        }\n\n        this.__keys = VisitorKeys;\n        if (visitor.keys) {\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n        }\n    };\n\n    function isNode(node) {\n        if (node == null) {\n            return false;\n        }\n        return typeof node === 'object' && typeof node.type === 'string';\n    }\n\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n    }\n  \n    function candidateExistsInLeaveList(leavelist, candidate) {\n        for (var i = leavelist.length - 1; i >= 0; --i) {\n            if (leavelist[i].node === candidate) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist,\n            leavelist,\n            element,\n            node,\n            nodeType,\n            ret,\n            key,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                ret = this.__execute(visitor.leave, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n\n            if (element.node) {\n\n                ret = this.__execute(visitor.enter, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n\n                worklist.push(sentinel);\n                leavelist.push(element);\n\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) {\n                        candidates = this.__fallback(node);\n                    } else {\n                        throw new Error('Unknown node type ' + nodeType + '.');\n                    }\n                }\n\n                current = candidates.length;\n                while ((current -= 1) >= 0) {\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n\n                    if (Array.isArray(candidate)) {\n                        current2 = candidate.length;\n                        while ((current2 -= 1) >= 0) {\n                            if (!candidate[current2]) {\n                                continue;\n                            }\n\n                            if (candidateExistsInLeaveList(leavelist, candidate[current2])) {\n                              continue;\n                            }\n\n                            if (isProperty(nodeType, candidates[current])) {\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\n                            } else if (isNode(candidate[current2])) {\n                                element = new Element(candidate[current2], [key, current2], null, null);\n                            } else {\n                                continue;\n                            }\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) {\n                        if (candidateExistsInLeaveList(leavelist, candidate)) {\n                          continue;\n                        }\n\n                        worklist.push(new Element(candidate, key, null, null));\n                    }\n                }\n            }\n        }\n    };\n\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist,\n            leavelist,\n            node,\n            nodeType,\n            target,\n            element,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel,\n            outer,\n            key;\n\n        function removeElem(element) {\n            var i,\n                key,\n                nextElem,\n                parent;\n\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while (i--) {\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if  (nextElem.ref.key < key) {\n                            break;\n                        }\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, 'root'));\n        worklist.push(element);\n        leavelist.push(element);\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                target = this.__execute(visitor.leave, element);\n\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                    // replace\n                    element.ref.replace(target);\n                }\n\n                if (this.__state === REMOVE || target === REMOVE) {\n                    removeElem(element);\n                }\n\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n\n            target = this.__execute(visitor.enter, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error('Unknown node type ' + nodeType + '.');\n                }\n            }\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (Array.isArray(candidate)) {\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                }\n            }\n        }\n\n        return outer.root;\n    };\n\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        cursor = 0;\n        traverse(tree, {\n            leave: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.attachComments = attachComments;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n    exports.Controller = Controller;\n    exports.cloneEnvironment = function () { return clone({}); };\n\n    return exports;\n}(exports));\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"mappings":";;;;AA2BA,EAAC,SAAS,MAAM,WAAS;EAGrB,IAAI,QACA,eACA,aACA,OACA,MACA;EAEJ,SAAS,SAAS,KAAK;GACnB,IAAI,MAAM,EAAE,EAAE,KAAK;AACnB,QAAK,OAAO,IACR,KAAI,IAAI,eAAe,IAAI,EAAE;AACzB,UAAM,IAAI;AACV,QAAI,OAAO,QAAQ,YAAY,QAAQ,KACnC,KAAI,OAAO,SAAS,IAAI;QAExB,KAAI,OAAO;;AAIvB,UAAO;;EAMX,SAAS,WAAW,OAAO,MAAM;GAC7B,IAAI,MAAM,MAEJ,MAAM,QAFG,IAGX,GAHc;AAKlB,UAAO,KAAK;AACR,WAAO,QAAQ;AACf,cAAU,IAAI;AACd,QAAI,KAAK,MAAM,SAAS,CACpB,OAAM;SACH;AACH,SAAI,UAAU;AACd,YAAO,OAAO;;;AAGtB,UAAO;;AAGX,WAAS;GACL,sBAAsB;GACtB,mBAAmB;GACnB,iBAAiB;GACjB,cAAc;GACd,yBAAyB;GACzB,iBAAiB;GACjB,gBAAgB;GAChB,kBAAkB;GAClB,gBAAgB;GAChB,gBAAgB;GAChB,aAAa;GACb,iBAAiB;GACjB,WAAW;GACX,kBAAkB;GAClB,iBAAiB;GACjB,oBAAoB;GACpB,yBAAyB;GACzB,uBAAuB;GACvB,mBAAmB;GACnB,mBAAmB;GACnB,oBAAoB;GACpB,kBAAkB;GAClB,gBAAgB;GAChB,sBAAsB;GACtB,0BAA0B;GAC1B,wBAAwB;GACxB,iBAAiB;GACjB,qBAAqB;GACrB,cAAc;GACd,gBAAgB;GAChB,gBAAgB;GAChB,qBAAqB;GACrB,oBAAoB;GACpB,qBAAqB;GACrB,YAAY;GACZ,aAAa;GACb,kBAAkB;GAClB,mBAAmB;GACnB,wBAAwB;GACxB,0BAA0B;GAC1B,iBAAiB;GACjB,SAAS;GACT,kBAAkB;GAClB,mBAAmB;GACnB,kBAAkB;GAClB,cAAc;GACd,kBAAkB;GAClB,iBAAiB;GACjB,eAAe;GACf,kBAAkB;GAClB,eAAe;GACf,mBAAmB;GACnB,SAAS;GACT,UAAU;GACV,oBAAoB;GACpB,aAAa;GACb,iBAAiB;GACjB,oBAAoB;GACpB,eAAe;GACf,OAAO;GACP,iBAAiB;GACjB,YAAY;GACZ,0BAA0B;GAC1B,iBAAiB;GACjB,iBAAiB;GACjB,gBAAgB;GAChB,gBAAgB;GAChB,cAAc;GACd,iBAAiB;GACjB,kBAAkB;GAClB,qBAAqB;GACrB,oBAAoB;GACpB,gBAAgB;GAChB,eAAe;GACf,iBAAiB;GACpB;AAED,gBAAc;GACV,sBAAsB,CAAC,QAAQ,QAAQ;GACvC,mBAAmB,CAAC,QAAQ,QAAQ;GACpC,iBAAiB,CAAC,WAAW;GAC7B,cAAc,CAAC,WAAW;GAC1B,yBAAyB,CAAC,UAAU,OAAO;GAC3C,iBAAiB,CAAC,WAAW;GAC7B,gBAAgB,CAAC,OAAO;GACxB,kBAAkB,CAAC,QAAQ,QAAQ;GACnC,gBAAgB,CAAC,QAAQ;GACzB,gBAAgB,CAAC,UAAU,YAAY;GACvC,aAAa,CAAC,SAAS,OAAO;GAC9B,iBAAiB,CAAC,aAAa;GAC/B,WAAW,CAAC,OAAO;GACnB,kBAAkB;IAAC;IAAM;IAAc;IAAO;GAC9C,iBAAiB;IAAC;IAAM;IAAc;IAAO;GAC7C,oBAAoB,CAAC,QAAQ,QAAQ;GACrC,yBAAyB;IAAC;IAAU;IAAU;IAAO;GACrD,uBAAuB;IAAC;IAAQ;IAAc;IAAY;GAC1D,mBAAmB,CAAC,QAAQ;GAC5B,mBAAmB,EAAE;GACrB,oBAAoB,EAAE;GACtB,kBAAkB,CAAC,QAAQ,OAAO;GAClC,gBAAgB,EAAE;GAClB,sBAAsB,CAAC,SAAS;GAChC,0BAA0B,CAAC,cAAc;GACzC,wBAAwB;IAAC;IAAe;IAAc;IAAS;GAC/D,iBAAiB,CAAC,YAAY,QAAQ;GACtC,qBAAqB,CAAC,aAAa;GACnC,cAAc;IAAC;IAAQ;IAAQ;IAAU;IAAO;GAChD,gBAAgB;IAAC;IAAQ;IAAS;IAAO;GACzC,gBAAgB;IAAC;IAAQ;IAAS;IAAO;GACzC,qBAAqB;IAAC;IAAM;IAAU;IAAO;GAC7C,oBAAoB;IAAC;IAAM;IAAU;IAAO;GAC5C,qBAAqB;IAAC;IAAU;IAAU;IAAO;GACjD,YAAY,EAAE;GACd,aAAa;IAAC;IAAQ;IAAc;IAAY;GAChD,kBAAkB,CAAC,SAAS;GAC5B,mBAAmB,CAAC,cAAc,SAAS;GAC3C,wBAAwB,CAAC,QAAQ;GACjC,0BAA0B,CAAC,QAAQ;GACnC,iBAAiB,CAAC,YAAY,QAAQ;GACtC,SAAS,EAAE;GACX,kBAAkB,CAAC,SAAS,OAAO;GACnC,mBAAmB,CAAC,QAAQ,QAAQ;GACpC,kBAAkB,CAAC,UAAU,WAAW;GACxC,cAAc,CAAC,QAAQ,WAAW;GAClC,kBAAkB,CAAC,OAAO,QAAQ;GAClC,iBAAiB,EAAE;GACnB,eAAe,CAAC,UAAU,YAAY;GACtC,kBAAkB,CAAC,aAAa;GAChC,eAAe,CAAC,aAAa;GAC7B,mBAAmB,EAAE;GACrB,SAAS,CAAC,OAAO;GACjB,UAAU,CAAC,OAAO,QAAQ;GAC1B,oBAAoB,CAAC,OAAO,QAAQ;GACpC,aAAa,CAAE,WAAY;GAC3B,iBAAiB,CAAC,WAAW;GAC7B,oBAAoB,CAAC,cAAc;GACnC,eAAe,CAAC,WAAW;GAC3B,OAAO,EAAE;GACT,iBAAiB,CAAC,gBAAgB,QAAQ;GAC1C,YAAY,CAAC,QAAQ,aAAa;GAClC,0BAA0B,CAAC,OAAO,QAAQ;GAC1C,iBAAiB,EAAE;GACnB,iBAAiB,CAAC,UAAU,cAAc;GAC1C,gBAAgB,EAAE;GAClB,gBAAgB,CAAC,WAAW;GAC5B,cAAc;IAAC;IAAS;IAAW;IAAY;GAC/C,iBAAiB,CAAC,WAAW;GAC7B,kBAAkB,CAAC,WAAW;GAC9B,qBAAqB,CAAC,eAAe;GACrC,oBAAoB,CAAC,MAAM,OAAO;GAClC,gBAAgB,CAAC,QAAQ,OAAO;GAChC,eAAe,CAAC,UAAU,OAAO;GACjC,iBAAiB,CAAC,WAAW;GAChC;AAGD,UAAQ,EAAE;AACV,SAAO,EAAE;AACT,WAAS,EAAE;AAEX,kBAAgB;GACZ,OAAO;GACP,MAAM;GACN,QAAQ;GACX;EAED,SAAS,UAAU,QAAQ,KAAK;AAC5B,QAAK,SAAS;AACd,QAAK,MAAM;;AAGf,YAAU,UAAU,UAAU,SAASA,UAAQ,MAAM;AACjD,QAAK,OAAO,KAAK,OAAO;;AAG5B,YAAU,UAAU,SAAS,SAAS,SAAS;AAC3C,OAAI,MAAM,QAAQ,KAAK,OAAO,EAAE;AAC5B,SAAK,OAAO,OAAO,KAAK,KAAK,EAAE;AAC/B,WAAO;UACJ;AACH,SAAK,QAAQ,KAAK;AAClB,WAAO;;;EAIf,SAAS,QAAQ,MAAM,MAAM,MAAM,KAAK;AACpC,QAAK,OAAO;AACZ,QAAK,OAAO;AACZ,QAAK,OAAO;AACZ,QAAK,MAAM;;EAGf,SAAS,aAAa;AAItB,aAAW,UAAU,OAAO,SAAS,OAAO;GACxC,IAAI,GAAG,IAAI,GAAG,IAAI,QAAQ;GAE1B,SAAS,UAAU,UAAQ,QAAM;AAC7B,QAAI,MAAM,QAAQC,OAAK,CACnB,MAAK,IAAI,GAAG,KAAKA,OAAK,QAAQ,IAAI,IAAI,EAAE,EACpC,UAAO,KAAKA,OAAK,GAAG;QAGxB,UAAO,KAAKA,OAAK;;AAKzB,OAAI,CAAC,KAAK,UAAU,KAChB,QAAO;AAIX,YAAS,EAAE;AACX,QAAK,IAAI,GAAG,KAAK,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE,GAAG;AACnD,cAAU,KAAK,YAAY;AAC3B,cAAU,QAAQ,QAAQ,KAAK;;AAEnC,aAAU,QAAQ,KAAK,UAAU,KAAK;AACtC,UAAO;;AAKX,aAAW,UAAU,OAAO,WAAY;AAEpC,UADW,KAAK,SAAS,CACb,QAAQ,KAAK,UAAU;;AAKvC,aAAW,UAAU,UAAU,SAAS,UAAU;GAC9C,IAAI,GAAG,IAAI,SAGF,EAAE;AACX,QAAK,IAAI,GAAG,KAAK,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE,EAChD,QAAO,KAAK,KAAK,YAAY,GAAG,KAAK;AAGzC,UAAO;;AAKX,aAAW,UAAU,UAAU,SAAS,UAAU;AAC9C,UAAO,KAAK,UAAU;;AAG1B,aAAW,UAAU,YAAY,SAAS,UAAU,UAAU,SAAS;GACnE,IAAI,UAAU,SAEL;AAET,cAAY,KAAK;AACjB,QAAK,YAAY;AACjB,QAAK,UAAU;AACf,OAAI,SACA,UAAS,SAAS,KAAK,MAAM,QAAQ,MAAM,KAAK,YAAY,KAAK,YAAY,SAAS,GAAG,KAAK;AAElG,QAAK,YAAY;AAEjB,UAAO;;AAKX,aAAW,UAAU,SAAS,SAAS,OAAO,MAAM;AAChD,QAAK,UAAU;;AAKnB,aAAW,UAAU,OAAO,WAAY;AACpC,QAAK,OAAO,KAAK;;AAKrB,aAAW,UAAU,WAAW,WAAY;AACxC,QAAK,OAAO,MAAM;;AAKtB,aAAW,UAAU,SAAS,WAAY;AACtC,QAAK,OAAO,OAAO;;AAGvB,aAAW,UAAU,eAAe,SAAS,MAAM,SAAS;AACxD,QAAK,UAAU;AACf,QAAK,OAAO;AACZ,QAAK,aAAa,EAAE;AACpB,QAAK,cAAc,EAAE;AACrB,QAAK,YAAY;AACjB,QAAK,UAAU;AACf,QAAK,aAAa;AAClB,OAAI,QAAQ,aAAa,YACrB,MAAK,aAAa,OAAO;YAClB,OAAO,QAAQ,aAAa,WACnC,MAAK,aAAa,QAAQ;AAG9B,QAAK,SAAS;AACd,OAAI,QAAQ,KACR,MAAK,SAAS,OAAO,OAAO,OAAO,OAAO,KAAK,OAAO,EAAE,QAAQ,KAAK;;EAI7E,SAAS,OAAO,MAAM;AAClB,OAAI,QAAQ,KACR,QAAO;AAEX,UAAO,OAAO,SAAS,YAAY,OAAO,KAAK,SAAS;;EAG5D,SAAS,WAAW,UAAU,KAAK;AAC/B,WAAQ,aAAa,OAAO,oBAAoB,aAAa,OAAO,kBAAkB,iBAAiB;;EAG3G,SAAS,2BAA2B,WAAW,WAAW;AACtD,QAAK,IAAI,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,EAAE,EACzC,KAAI,UAAU,GAAG,SAAS,UACtB,QAAO;AAGf,UAAO;;AAGX,aAAW,UAAU,WAAW,SAASC,WAAS,MAAM,SAAS;GAC7D,IAAI,UACA,WACA,SACA,MACA,UACA,KACA,KACA,SACA,UACA,YACA,WACA;AAEJ,QAAK,aAAa,MAAM,QAAQ;AAEhC,cAAW,EAAE;AAGb,cAAW,KAAK;AAChB,eAAY,KAAK;AAGjB,YAAS,KAAK,IAAI,QAAQ,MAAM,MAAM,MAAM,KAAK,CAAC;AAClD,aAAU,KAAK,IAAI,QAAQ,MAAM,MAAM,MAAM,KAAK,CAAC;AAEnD,UAAO,SAAS,QAAQ;AACpB,cAAU,SAAS,KAAK;AAExB,QAAI,YAAY,UAAU;AACtB,eAAU,UAAU,KAAK;AAEzB,WAAM,KAAK,UAAU,QAAQ,OAAO,QAAQ;AAE5C,SAAI,KAAK,YAAY,SAAS,QAAQ,MAClC;AAEJ;;AAGJ,QAAI,QAAQ,MAAM;AAEd,WAAM,KAAK,UAAU,QAAQ,OAAO,QAAQ;AAE5C,SAAI,KAAK,YAAY,SAAS,QAAQ,MAClC;AAGJ,cAAS,KAAK,SAAS;AACvB,eAAU,KAAK,QAAQ;AAEvB,SAAI,KAAK,YAAY,QAAQ,QAAQ,KACjC;AAGJ,YAAO,QAAQ;AACf,gBAAW,KAAK,QAAQ,QAAQ;AAChC,kBAAa,KAAK,OAAO;AACzB,SAAI,CAAC,WACD,KAAI,KAAK,WACL,cAAa,KAAK,WAAW,KAAK;SAElC,OAAM,IAAI,MAAM,uBAAuB,WAAW,IAAI;AAI9D,eAAU,WAAW;AACrB,aAAQ,WAAW,MAAM,GAAG;AACxB,YAAM,WAAW;AACjB,kBAAY,KAAK;AACjB,UAAI,CAAC,UACD;AAGJ,UAAI,MAAM,QAAQ,UAAU,EAAE;AAC1B,kBAAW,UAAU;AACrB,eAAQ,YAAY,MAAM,GAAG;AACzB,YAAI,CAAC,UAAU,UACX;AAGJ,YAAI,2BAA2B,WAAW,UAAU,UAAU,CAC5D;AAGF,YAAI,WAAW,UAAU,WAAW,SAAS,CACzC,WAAU,IAAI,QAAQ,UAAU,WAAW,CAAC,KAAK,SAAS,EAAE,YAAY,KAAK;iBACtE,OAAO,UAAU,UAAU,CAClC,WAAU,IAAI,QAAQ,UAAU,WAAW,CAAC,KAAK,SAAS,EAAE,MAAM,KAAK;YAEvE;AAEJ,iBAAS,KAAK,QAAQ;;iBAEnB,OAAO,UAAU,EAAE;AAC1B,WAAI,2BAA2B,WAAW,UAAU,CAClD;AAGF,gBAAS,KAAK,IAAI,QAAQ,WAAW,KAAK,MAAM,KAAK,CAAC;;;;;;AAO1E,aAAW,UAAU,UAAU,SAASF,UAAQ,MAAM,SAAS;GAC3D,IAAI,UACA,WACA,MACA,UACA,QACA,SACA,SACA,UACA,YACA,WACA,UACA,OACA;GAEJ,SAAS,WAAW,WAAS;IACzB,IAAI,GACAG,OACA,UACA;AAEJ,QAAIC,UAAQ,IAAI,QAAQ,EAAE;AAEtB,aAAMA,UAAQ,IAAI;AAClB,cAASA,UAAQ,IAAI;AAGrB,SAAI,SAAS;AACb,YAAO,KAAK;AACR,iBAAW,SAAS;AACpB,UAAI,SAAS,OAAO,SAAS,IAAI,WAAW,QAAQ;AAChD,WAAK,SAAS,IAAI,MAAMD,MACpB;AAEJ,SAAE,SAAS,IAAI;;;;;AAM/B,QAAK,aAAa,MAAM,QAAQ;AAEhC,cAAW,EAAE;AAGb,cAAW,KAAK;AAChB,eAAY,KAAK;AAGjB,WAAQ,EACE,MACT;AACD,aAAU,IAAI,QAAQ,MAAM,MAAM,MAAM,IAAI,UAAU,OAAO,OAAO,CAAC;AACrE,YAAS,KAAK,QAAQ;AACtB,aAAU,KAAK,QAAQ;AAEvB,UAAO,SAAS,QAAQ;AACpB,cAAU,SAAS,KAAK;AAExB,QAAI,YAAY,UAAU;AACtB,eAAU,UAAU,KAAK;AAEzB,cAAS,KAAK,UAAU,QAAQ,OAAO,QAAQ;AAI/C,SAAI,WAAW,UAAa,WAAW,SAAS,WAAW,QAAQ,WAAW,OAE1E,SAAQ,IAAI,QAAQ,OAAO;AAG/B,SAAI,KAAK,YAAY,UAAU,WAAW,OACtC,YAAW,QAAQ;AAGvB,SAAI,KAAK,YAAY,SAAS,WAAW,MACrC,QAAO,MAAM;AAEjB;;AAGJ,aAAS,KAAK,UAAU,QAAQ,OAAO,QAAQ;AAI/C,QAAI,WAAW,UAAa,WAAW,SAAS,WAAW,QAAQ,WAAW,QAAQ;AAElF,aAAQ,IAAI,QAAQ,OAAO;AAC3B,aAAQ,OAAO;;AAGnB,QAAI,KAAK,YAAY,UAAU,WAAW,QAAQ;AAC9C,gBAAW,QAAQ;AACnB,aAAQ,OAAO;;AAGnB,QAAI,KAAK,YAAY,SAAS,WAAW,MACrC,QAAO,MAAM;AAIjB,WAAO,QAAQ;AACf,QAAI,CAAC,KACD;AAGJ,aAAS,KAAK,SAAS;AACvB,cAAU,KAAK,QAAQ;AAEvB,QAAI,KAAK,YAAY,QAAQ,WAAW,KACpC;AAGJ,eAAW,KAAK,QAAQ,QAAQ;AAChC,iBAAa,KAAK,OAAO;AACzB,QAAI,CAAC,WACD,KAAI,KAAK,WACL,cAAa,KAAK,WAAW,KAAK;QAElC,OAAM,IAAI,MAAM,uBAAuB,WAAW,IAAI;AAI9D,cAAU,WAAW;AACrB,YAAQ,WAAW,MAAM,GAAG;AACxB,WAAM,WAAW;AACjB,iBAAY,KAAK;AACjB,SAAI,CAAC,UACD;AAGJ,SAAI,MAAM,QAAQ,UAAU,EAAE;AAC1B,iBAAW,UAAU;AACrB,cAAQ,YAAY,MAAM,GAAG;AACzB,WAAI,CAAC,UAAU,UACX;AAEJ,WAAI,WAAW,UAAU,WAAW,SAAS,CACzC,WAAU,IAAI,QAAQ,UAAU,WAAW,CAAC,KAAK,SAAS,EAAE,YAAY,IAAI,UAAU,WAAW,SAAS,CAAC;gBACpG,OAAO,UAAU,UAAU,CAClC,WAAU,IAAI,QAAQ,UAAU,WAAW,CAAC,KAAK,SAAS,EAAE,MAAM,IAAI,UAAU,WAAW,SAAS,CAAC;WAErG;AAEJ,gBAAS,KAAK,QAAQ;;gBAEnB,OAAO,UAAU,CACxB,UAAS,KAAK,IAAI,QAAQ,WAAW,KAAK,MAAM,IAAI,UAAU,MAAM,IAAI,CAAC,CAAC;;;AAKtF,UAAO,MAAM;;EAGjB,SAAS,SAAS,MAAM,SAAS;AAE7B,UADiB,IAAI,YAAY,CACf,SAAS,MAAM,QAAQ;;EAG7C,SAAS,QAAQ,MAAM,SAAS;AAE5B,UADiB,IAAI,YAAY,CACf,QAAQ,MAAM,QAAQ;;EAG5C,SAAS,mBAAmB,SAAS,QAAQ;GACzC,IAAI,SAEK,WAAW,QAAQ,SAAS,OAAO,OAAO;AAC/C,WAAO,MAAM,MAAM,KAAK,QAAQ,MAAM;KACxC;AAEF,WAAQ,gBAAgB,CAAC,QAAQ,MAAM,IAAI,QAAQ,MAAM,GAAG;AAE5D,OAAI,WAAW,OAAO,OAClB,SAAQ,cAAc,KAAK,OAAO,QAAQ,MAAM;AAGpD,aAAU;AACV,OAAI,UAAU,EACV,SAAQ,cAAc,KAAK,OAAO,QAAQ,MAAM;AAGpD,UAAO;;EAGX,SAAS,eAAe,MAAM,kBAAkB,QAAQ;GAEpD,IAAI,WAAW,EAAE,EAAE,SAAS,KAAK,GAAG;AAEpC,OAAI,CAAC,KAAK,MACN,OAAM,IAAI,MAAM,yCAAyC;AAI7D,OAAI,CAAC,OAAO,QAAQ;AAChB,QAAI,iBAAiB,QAAQ;AACzB,UAAK,IAAI,GAAG,MAAM,iBAAiB,QAAQ,IAAI,KAAK,KAAK,GAAG;AACxD,gBAAU,SAAS,iBAAiB,GAAG;AACvC,cAAQ,gBAAgB,CAAC,GAAG,KAAK,MAAM,GAAG;AAC1C,eAAS,KAAK,QAAQ;;AAE1B,UAAK,kBAAkB;;AAE3B,WAAO;;AAGX,QAAK,IAAI,GAAG,MAAM,iBAAiB,QAAQ,IAAI,KAAK,KAAK,EACrD,UAAS,KAAK,mBAAmB,SAAS,iBAAiB,GAAG,EAAE,OAAO,CAAC;AAI5E,YAAS;AACT,YAAS,MAAM,EACX,OAAO,SAAU,MAAM;IACnB,IAAIE;AAEJ,WAAO,SAAS,SAAS,QAAQ;AAC7B,iBAAU,SAAS;AACnB,SAAIA,UAAQ,cAAc,KAAK,KAAK,MAAM,GACtC;AAGJ,SAAIA,UAAQ,cAAc,OAAO,KAAK,MAAM,IAAI;AAC5C,UAAI,CAAC,KAAK,gBACN,MAAK,kBAAkB,EAAE;AAE7B,WAAK,gBAAgB,KAAKA,UAAQ;AAClC,eAAS,OAAO,QAAQ,EAAE;WAE1B,WAAU;;AAKlB,QAAI,WAAW,SAAS,OACpB,QAAO,cAAc;AAGzB,QAAI,SAAS,QAAQ,cAAc,KAAK,KAAK,MAAM,GAC/C,QAAO,cAAc;MAGhC,CAAC;AAEF,YAAS;AACT,YAAS,MAAM,EACX,OAAO,SAAU,MAAM;IACnB,IAAIA;AAEJ,WAAO,SAAS,SAAS,QAAQ;AAC7B,iBAAU,SAAS;AACnB,SAAI,KAAK,MAAM,KAAKA,UAAQ,cAAc,GACtC;AAGJ,SAAI,KAAK,MAAM,OAAOA,UAAQ,cAAc,IAAI;AAC5C,UAAI,CAAC,KAAK,iBACN,MAAK,mBAAmB,EAAE;AAE9B,WAAK,iBAAiB,KAAKA,UAAQ;AACnC,eAAS,OAAO,QAAQ,EAAE;WAE1B,WAAU;;AAKlB,QAAI,WAAW,SAAS,OACpB,QAAO,cAAc;AAGzB,QAAI,SAAS,QAAQ,cAAc,KAAK,KAAK,MAAM,GAC/C,QAAO,cAAc;MAGhC,CAAC;AAEF,UAAO;;AAGX,YAAQ,SAAS;AACjB,YAAQ,WAAW;AACnB,YAAQ,UAAU;AAClB,YAAQ,iBAAiB;AACzB,YAAQ,cAAc;AACtB,YAAQ,gBAAgB;AACxB,YAAQ,aAAa;AACrB,YAAQ,mBAAmB,WAAY;AAAE,UAAO,MAAM,EAAE,CAAC;;AAEzD,SAAOC;IACT,QAAQ"}