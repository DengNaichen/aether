import { __toESM } from "./chunk-B4p5S3KX.js";
import { require_react } from "./react-C2Ypln8Q.js";
import { require_client } from "./client-BHV5gaVP.js";

//#region node_modules/@storybook/react-dom-shim/dist/react-18.mjs
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
var import_client = /* @__PURE__ */ __toESM(require_client(), 1);
var nodes = /* @__PURE__ */ new Map();
function getIsReactActEnvironment() {
	return globalThis.IS_REACT_ACT_ENVIRONMENT;
}
var WithCallback = ({ callback, children }) => {
	let once = import_react.useRef();
	return import_react.useLayoutEffect(() => {
		once.current !== callback && (once.current = callback, callback());
	}, [callback]), children;
};
typeof Promise.withResolvers > "u" && (Promise.withResolvers = () => {
	let resolve = null, reject = null;
	return {
		promise: new Promise((res, rej) => {
			resolve = res, reject = rej;
		}),
		resolve,
		reject
	};
});
var renderElement = async (node, el, rootOptions) => {
	let root = await getReactRoot(el, rootOptions);
	if (getIsReactActEnvironment()) {
		root.render(node);
		return;
	}
	let { promise, resolve } = Promise.withResolvers();
	return root.render(import_react.createElement(WithCallback, { callback: resolve }, node)), promise;
}, unmountElement = (el, shouldUseNewRootApi) => {
	let root = nodes.get(el);
	root && (root.unmount(), nodes.delete(el));
}, getReactRoot = async (el, rootOptions) => {
	let root = nodes.get(el);
	return root || (root = import_client.createRoot(el, rootOptions), nodes.set(el, root)), root;
};

//#endregion
export { renderElement, unmountElement };
//# sourceMappingURL=react-18-D_P2cVa6.js.map