{"version":3,"file":"@mdx-js_react.js","names":[],"sources":["../../../../../@mdx-js/react/lib/index.js"],"sourcesContent":["/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"mappings":";;;;;;AA0BA,IAAM,kBAAkB,EAAE;AAE1B,IAAM,0BAAmB,cAAc,gBAAgB;;;;;;;;;AAUvD,SAAgB,iBAAiB,YAAY;CAC3C,MAAM,iCAA0B,WAAW,WAAW;AAGtD,qBAAa,QACX,WAAY;AAEV,MAAI,OAAO,eAAe,WACxB,QAAO,WAAW,kBAAkB;AAGtC,SAAO;GAAC,GAAG;GAAmB,GAAG;GAAW;IAE9C,CAAC,mBAAmB,WAAW,CAChC;;;;;;;;;;;AAYH,SAAgB,YAAY,YAAY;;CAEtC,IAAI;AAEJ,KAAI,WAAW,qBACb,iBACE,OAAO,WAAW,eAAe,aAC7B,WAAW,WAAW,gBAAgB,GACtC,WAAW,cAAc;KAE/B,iBAAgB,iBAAiB,WAAW,WAAW;AAGzD,qBAAa,cACX,WAAW,UACX,EAAC,OAAO,eAAc,EACtB,WAAW,SACZ"}